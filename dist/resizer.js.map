{"version":3,"sources":["resizer.ts"],"names":[],"mappings":"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","file":"resizer.js","sourceRoot":"..\\src","sourcesContent":["/**\r\n * Resizer Element Interface\r\n * @interface\r\n * @class Resizer.IResizerElement\r\n * @classdesc Interface Description\r\n */\r\ninterface IResizerElement extends HTMLElement {\r\n\r\n  /**\r\n   * Resizer Object\r\n   * @abstract\r\n   * @member {Resizer} Resizer.IResizerElement#Resizer\r\n   */\r\n  Resizer?: Resizer;\r\n}\r\n\r\n/**\r\n * Resizer Options Interface\r\n * @interface\r\n * @class Resizer.IResizerOptions\r\n * @classdesc Interface Description\r\n */\r\ninterface IResizerOptions {\r\n\r\n  /**\r\n   * Width of the handle\r\n   * @abstract\r\n   * @member {number} Resizer.IResizerOptions#width\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * Classname for the handle element\r\n   * @abstract\r\n   * @member {string} Resizer.IResizerOptions#className\r\n   */\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Resizer Class\r\n */\r\nexport default class Resizer {\r\n\r\n  /**\r\n   * Default Options\r\n   * @public\r\n   * @type {{width: number}}\r\n   */\r\n  public static defaultOptions: IResizerOptions = {\r\n    width: 8,\r\n  };\r\n\r\n  /**\r\n   * Removes a resizer by a container selector\r\n   * @public\r\n   * @static\r\n   * @method Resizer#removeBySelector\r\n   */\r\n  public static removeBySelector(input): void {\r\n    const container = Resizer.getElement(input) as IResizerElement;\r\n    if (container.hasOwnProperty('Resizer')) {\r\n      container.Resizer.remove();\r\n    } else {\r\n      throw new Error('Resizer doesn\\'t exist on element');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an HTML\r\n   * @param {string | Element} input\r\n   * @return {IResizerElement} container\r\n   */\r\n  private static getElement(input: string | HTMLElement): IResizerElement {\r\n    let el;\r\n\r\n    if (!input) {\r\n      throw new Error('Missing param, should be an element or selector');\r\n    }\r\n\r\n    if (typeof input === 'string') {\r\n      el = document.querySelector(input) as HTMLElement;\r\n      if (!el) {\r\n        throw new Error(`Can not find element from selector ${input}`);\r\n      }\r\n    } else {\r\n      el = input;\r\n    }\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Create the Handle HTMLElement\r\n   * @private\r\n   * @static\r\n   * @method Resizer#createHandle\r\n   * @param {string} handleClass A class name to be set on the handle\r\n   * @return {HTMLDivElement} handle element\r\n   */\r\n  private static createHandle(handleClass?: string): HTMLDivElement {\r\n    const el = document.createElement('div') as HTMLDivElement;\r\n    el.dataset.rzHandle = handleClass || '';\r\n    el.style.cursor = 'ew-resize';\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Create the Ghost Element\r\n   * @private\r\n   * @static\r\n   * @method Resizer#createGhost\r\n   * @return {HTMLDivElement} ghost element\r\n   */\r\n  private static createGhost(): HTMLDivElement {\r\n    const el = document.createElement('div') as HTMLDivElement;\r\n    el.style.position = 'absolute';\r\n    el.style.top = '0';\r\n    el.style.bottom = '0';\r\n    el.style.display = 'none';\r\n    el.style.zIndex = '99999';\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @member {IResizerOptions} Resizer#options\r\n   */\r\n  public options: IResizerOptions;\r\n\r\n  /**\r\n   * Container Element\r\n   * @private\r\n   * @member {HTMLElement} Resizer#container\r\n   */\r\n  private container: IResizerElement;\r\n\r\n  /**\r\n   * Handle Element\r\n   * @public\r\n   * @member {HTMLDivElement} Resizer#handle\r\n   */\r\n  private handle: HTMLDivElement;\r\n\r\n  /**\r\n   * Target Element\r\n   * @public\r\n   * @member {HTMLElement} Resizer#target\r\n   */\r\n  private target: HTMLElement;\r\n\r\n  /**\r\n   * Offset X value when clicking on handle\r\n   * @public\r\n   * @member {HTMLElement} Resizer#offsetX\r\n   */\r\n  private offsetX: number = 0;\r\n\r\n  /**\r\n   * Handle visible when dragging\r\n   * @member {HTMLDivElement} Resizer#ghost\r\n   */\r\n  private ghost: HTMLDivElement;\r\n\r\n  /**\r\n   * Current left value for the handle element in relation to it's parent (container)\r\n   * @member {number} Resizer#handleX\r\n   */\r\n  private handleX: number;\r\n\r\n  /**\r\n   * Handle is being dragged\r\n   * @member {boolean} Resizer#dragging\r\n   */\r\n  private dragging: boolean = false;\r\n\r\n  /**\r\n   * Resizer constructor\r\n   * @class Resizer\r\n   * @classdesc This class\r\n   * @param {string | HTMLElement} containerSelector Document selector or element\r\n   * @param {IResizerOptions} resizerOptions\r\n   */\r\n  constructor(\r\n    private containerSelector: string | HTMLElement,\r\n    private resizerOptions: IResizerOptions = {},\r\n  ) {\r\n    this.options = Object.assign(Resizer.defaultOptions, this.resizerOptions, {});\r\n    this.container = Resizer.getElement(containerSelector);\r\n    this.target = this.container.firstElementChild as HTMLElement;\r\n\r\n    if (this.container.Resizer) {\r\n      this.remove();\r\n    }\r\n\r\n    this.setup();\r\n  }\r\n\r\n  /**\r\n   * This method reverses the setup and removes the Resizer from the container\r\n   * @public\r\n   * @method Resizer#remove\r\n   */\r\n  public remove(): void {\r\n    delete this.container.Resizer;\r\n    this.container.style.position = null;\r\n    this.container.querySelector('[data-rz-handle]').remove();\r\n    this.target.style.flex = null;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @method Resizer#setup\r\n   */\r\n  private setup(): void {\r\n    this.setupDom();\r\n\r\n    // Add events\r\n    this.handle.addEventListener('mousedown', (e: MouseEvent) => this.onDown(e));\r\n    this.container.addEventListener('mouseup', (e: MouseEvent) => this.onUp(e));\r\n    this.container.addEventListener('mousemove', (e: MouseEvent) => this.onMove(e));\r\n\r\n    this.container.Resizer = this;\r\n  }\r\n\r\n  /**\r\n   * This private method sets up the DOM elements required to handle the resizer\r\n   * @private\r\n   * @method Resizer#setupDom\r\n   */\r\n  private setupDom(): void {\r\n\r\n    // Set Container to relative positioning\r\n    this.container.style.position = 'relative';\r\n\r\n    // Create Handle\r\n    this.handle = Resizer.createHandle();\r\n\r\n    // Create Ghost\r\n    this.ghost = Resizer.createGhost();\r\n\r\n    // Add Ghost to Handle\r\n    this.handle.appendChild(this.ghost);\r\n\r\n    // Insert Handle after Target\r\n    this.container.insertBefore(this.handle, this.target.nextElementSibling);\r\n  }\r\n\r\n  /**\r\n   * Sets the dragging value\r\n   * @private\r\n   * @param value\r\n   */\r\n  private setDragging(value: boolean = true): boolean {\r\n    if (this.dragging) {\r\n      this.ghost.style.display = 'none';\r\n      this.target.style.flex = `0 0 ${this.handleX}px`;\r\n    } else {\r\n      this.ghost.style.display = 'block';\r\n    }\r\n    return this.dragging = value;\r\n  }\r\n\r\n  /**\r\n   * Sets the handle X position value\r\n   * @param {number} value\r\n   */\r\n  private setHandleX(value: number): number {\r\n    if (value < 0) {\r\n      value = 0;\r\n    }\r\n    if (value > this.container.clientWidth) {\r\n      value = this.container.clientWidth;\r\n    }\r\n    this.ghost.style.left = `${value}px`;\r\n    return this.handleX = value;\r\n  }\r\n\r\n  /**\r\n   * Handle the mousedown event on the handle element\r\n   * @private\r\n   * @method Resizer#onDown\r\n   * @param {MouseEvent} e\r\n   */\r\n  private onDown(e: MouseEvent): void {\r\n    if (!this.dragging) {\r\n      e.preventDefault();\r\n      this.offsetX = e.offsetX;\r\n      this.setHandleX(e.pageX - this.container.getBoundingClientRect().left - this.offsetX);\r\n      this.setDragging(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the mouseup event on the container element\r\n   * @private\r\n   * @method Resizer#onUp\r\n   * @param {MouseEvent} e\r\n   */\r\n  private onUp(e: MouseEvent): void {\r\n    if (this.dragging) {\r\n      e.preventDefault();\r\n      this.setHandleX(e.pageX - this.container.getBoundingClientRect().left - this.offsetX);\r\n      this.setDragging(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the mousemove event on the container element\r\n   * @private\r\n   * @method Resizer#onMove\r\n   * @param {MouseEvent} e\r\n   */\r\n  private onMove(e: MouseEvent): void {\r\n    if (this.dragging) {\r\n      e.preventDefault();\r\n      let x = e.pageX - this.container.getBoundingClientRect().left - this.offsetX;\r\n      if (e.shiftKey) {\r\n        x = Math.ceil(x / 20) * 20;\r\n      }\r\n      this.setHandleX(x);\r\n    }\r\n  }\r\n}\r\n"]}